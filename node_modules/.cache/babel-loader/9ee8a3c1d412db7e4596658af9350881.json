{"remainingRequest":"/home/shahrad/Documents/multiplayer/node_modules/babel-loader/lib/index.js!/home/shahrad/Documents/multiplayer/src/click.js","dependencies":[{"path":"/home/shahrad/Documents/multiplayer/src/click.js","mtime":1684244427390},{"path":"/home/shahrad/Documents/multiplayer/node_modules/cache-loader/dist/cjs.js","mtime":1684244501439},{"path":"/home/shahrad/Documents/multiplayer/node_modules/babel-loader/lib/index.js","mtime":1684244499435}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3NoYWhyYWQvRG9jdW1lbnRzL211bHRpcGxheWVyL25vZGVfbW9kdWxlcy9AdnVlL2JhYmVsLXByZXNldC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwp2YXIgYXVkaW9Db250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpOwp2YXIgc3RlcmVvUGFubmVyTm9kZSA9IG5ldyBTdGVyZW9QYW5uZXJOb2RlKGF1ZGlvQ29udGV4dCwgewogIHBhbjogMAp9KTsKdmFyIGdhaW5Ob2RlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKTsKdmFyIGF1ZGlvQnVmZmVyID0gbnVsbDsKdmFyIHVwQXVkaW9CdWZmZXIgPSBudWxsOwp2YXIgZXZlbnRMb29wQ291bnQgPSAwOyAvLyBGZXRjaCBjbGljayBhdWRpbyBmaWxlcwoKZXhwb3J0IGZ1bmN0aW9uIGluaXRDbGljaygpIHsKICByZXR1cm4gX2luaXRDbGljay5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfaW5pdENsaWNrKCkgewogIF9pbml0Q2xpY2sgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICB2YXIgY2xpY2ssIGNsaWNrQXJyYXlCdWZmZXIsIGNsaWNrVXAsIGNsaWNrVXBBcnJheUJ1ZmZlcjsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBmZXRjaCgnLi9jbGljay53YXYnKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIGNsaWNrID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgIHJldHVybiBjbGljay5hcnJheUJ1ZmZlcigpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2xpY2tBcnJheUJ1ZmZlciA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICByZXR1cm4gZmV0Y2goJy4vY2xpY2stYWNjZW50LndhdicpOwoKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgY2xpY2tVcCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgcmV0dXJuIGNsaWNrVXAuYXJyYXlCdWZmZXIoKTsKCiAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICBjbGlja1VwQXJyYXlCdWZmZXIgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAgICAgYXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YShjbGlja0FycmF5QnVmZmVyLCBmdW5jdGlvbiAoXykgewogICAgICAgICAgICAgICAgYXVkaW9CdWZmZXIgPSBfOwogICAgICAgICAgICAgICAgYXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YShjbGlja1VwQXJyYXlCdWZmZXIsIGZ1bmN0aW9uIChfKSB7CiAgICAgICAgICAgICAgICAgIHVwQXVkaW9CdWZmZXIgPSBfOwogICAgICAgICAgICAgICAgICByZXMoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KSk7CgogICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CiAgcmV0dXJuIF9pbml0Q2xpY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGNsaWNrRXZlbnRMb29wKHN0b3JlKSB7CiAgdmFyIF9zdG9yZSRzdGF0ZSRjbGlja1RpbSA9IHN0b3JlLnN0YXRlLmNsaWNrVGltZVNpZ25hdHVyZSwKICAgICAgYmVhdHMgPSBfc3RvcmUkc3RhdGUkY2xpY2tUaW0uYmVhdHMsCiAgICAgIHVuaXQgPSBfc3RvcmUkc3RhdGUkY2xpY2tUaW0udW5pdDsKCiAgaWYgKCFiZWF0cyB8fCAhdW5pdCkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIGNsaWNrSW50ZXJ2YWwgPSBnZXRDbGlja0ludGVydmFsKHN0b3JlLnN0YXRlKTsKCiAgaWYgKHN0b3JlLnN0YXRlLnBsYXlQb3NpdGlvbiAvIGV2ZW50TG9vcENvdW50ID4gY2xpY2tJbnRlcnZhbCkgewogICAgdmFyIGJ1ZmZlclNvdXJjZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTsKICAgIGJ1ZmZlclNvdXJjZS5jb25uZWN0KGdhaW5Ob2RlKS5jb25uZWN0KHN0ZXJlb1Bhbm5lck5vZGUpLmNvbm5lY3QoYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTsKCiAgICBpZiAoZXZlbnRMb29wQ291bnQgJSBiZWF0cyA9PT0gMCkgewogICAgICBidWZmZXJTb3VyY2UuYnVmZmVyID0gdXBBdWRpb0J1ZmZlcjsKICAgICAgYnVmZmVyU291cmNlLnN0YXJ0KCk7CiAgICB9IGVsc2UgewogICAgICBidWZmZXJTb3VyY2UuYnVmZmVyID0gYXVkaW9CdWZmZXI7CiAgICAgIGJ1ZmZlclNvdXJjZS5zdGFydCgpOwogICAgfQoKICAgIGV2ZW50TG9vcENvdW50Kys7CiAgfQp9CmV4cG9ydCBmdW5jdGlvbiBzZXRDbGlja1Bhbih2YWx1ZSkgewogIHN0ZXJlb1Bhbm5lck5vZGUucGFuLnZhbHVlID0gdmFsdWU7Cn0KZXhwb3J0IGZ1bmN0aW9uIHNldENsaWNrRXZlbnRMb29wQ291bnQoY291bnQpIHsKICBldmVudExvb3BDb3VudCA9IGNvdW50Owp9CmV4cG9ydCBmdW5jdGlvbiBzZXRDbGlja0dhaW4odmFsdWUpIHsKICBnYWluTm9kZS5nYWluLnZhbHVlID0gdmFsdWU7Cn0KZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrSW50ZXJ2YWwoc3RhdGUpIHsKICByZXR1cm4gNjAgLyAoc3RhdGUuY2xpY2tCcG0gKiAoc3RhdGUuY2xpY2tUaW1lU2lnbmF0dXJlLnVuaXQgLyA0KSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIGdldENsaWNrQmVhdHMoc3RhdGUpIHsKICB2YXIgYmVhdHMgPSBNYXRoLmZsb29yKHN0YXRlLnBsYXlQb3NpdGlvbiAvIGdldENsaWNrSW50ZXJ2YWwoc3RhdGUpKTsKICByZXR1cm4gW01hdGguZmxvb3IoYmVhdHMgLyBzdGF0ZS5jbGlja1RpbWVTaWduYXR1cmUuYmVhdHMpLCBiZWF0cyAlIHN0YXRlLmNsaWNrVGltZVNpZ25hdHVyZS5iZWF0cyArIDFdOwp9"},{"version":3,"sources":["/home/shahrad/Documents/multiplayer/src/click.js"],"names":["audioContext","AudioContext","stereoPannerNode","StereoPannerNode","pan","gainNode","createGain","audioBuffer","upAudioBuffer","eventLoopCount","initClick","fetch","click","arrayBuffer","clickArrayBuffer","clickUp","clickUpArrayBuffer","Promise","res","decodeAudioData","_","clickEventLoop","store","state","clickTimeSignature","beats","unit","clickInterval","getClickInterval","playPosition","bufferSource","createBufferSource","connect","destination","buffer","start","setClickPan","value","setClickEventLoopCount","count","setClickGain","gain","clickBpm","getClickBeats","Math","floor"],"mappings":";;;AAAA,IAAMA,YAAY,GAAG,IAAIC,YAAJ,EAArB;AAEA,IAAMC,gBAAgB,GAAG,IAAIC,gBAAJ,CAAqBH,YAArB,EAAmC;AAC1DI,EAAAA,GAAG,EAAE;AADqD,CAAnC,CAAzB;AAGA,IAAMC,QAAQ,GAAGL,YAAY,CAACM,UAAb,EAAjB;AAEA,IAAIC,WAAW,GAAG,IAAlB;AACA,IAAIC,aAAa,GAAG,IAApB;AAEA,IAAIC,cAAc,GAAG,CAArB,C,CAEA;;AACA,gBAAsBC,SAAtB;AAAA;AAAA;;;uEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACeC,KAAK,CAAC,aAAD,CADpB;;AAAA;AACCC,YAAAA,KADD;AAAA;AAAA,mBAE0BA,KAAK,CAACC,WAAN,EAF1B;;AAAA;AAECC,YAAAA,gBAFD;AAAA;AAAA,mBAIiBH,KAAK,CAAC,oBAAD,CAJtB;;AAAA;AAICI,YAAAA,OAJD;AAAA;AAAA,mBAK4BA,OAAO,CAACF,WAAR,EAL5B;;AAAA;AAKCG,YAAAA,kBALD;AAAA,6CAOE,IAAIC,OAAJ,CAAY,UAAAC,GAAG,EAAI;AACxBlB,cAAAA,YAAY,CAACmB,eAAb,CAA6BL,gBAA7B,EAA+C,UAAAM,CAAC,EAAI;AAClDb,gBAAAA,WAAW,GAAGa,CAAd;AAEApB,gBAAAA,YAAY,CAACmB,eAAb,CAA6BH,kBAA7B,EAAiD,UAAAI,CAAC,EAAI;AACpDZ,kBAAAA,aAAa,GAAGY,CAAhB;AAEAF,kBAAAA,GAAG;AACJ,iBAJD;AAKD,eARD;AASD,aAVM,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAoBP,OAAO,SAASG,cAAT,CAAwBC,KAAxB,EAA+B;AAAA,8BACZA,KAAK,CAACC,KAAN,CAAYC,kBADA;AAAA,MAC5BC,KAD4B,yBAC5BA,KAD4B;AAAA,MACrBC,IADqB,yBACrBA,IADqB;;AAEpC,MAAI,CAACD,KAAD,IAAU,CAACC,IAAf,EAAqB;AACnB;AACD;;AAED,MAAMC,aAAa,GAAGC,gBAAgB,CAACN,KAAK,CAACC,KAAP,CAAtC;;AACA,MAAID,KAAK,CAACC,KAAN,CAAYM,YAAZ,GAA2BpB,cAA3B,GAA4CkB,aAAhD,EAA+D;AAC7D,QAAMG,YAAY,GAAG9B,YAAY,CAAC+B,kBAAb,EAArB;AACAD,IAAAA,YAAY,CACTE,OADH,CACW3B,QADX,EAEG2B,OAFH,CAEW9B,gBAFX,EAGG8B,OAHH,CAGWhC,YAAY,CAACiC,WAHxB;;AAKA,QAAIxB,cAAc,GAAGgB,KAAjB,KAA2B,CAA/B,EAAkC;AAChCK,MAAAA,YAAY,CAACI,MAAb,GAAsB1B,aAAtB;AACAsB,MAAAA,YAAY,CAACK,KAAb;AACD,KAHD,MAGO;AACLL,MAAAA,YAAY,CAACI,MAAb,GAAsB3B,WAAtB;AACAuB,MAAAA,YAAY,CAACK,KAAb;AACD;;AAED1B,IAAAA,cAAc;AACf;AACF;AAED,OAAO,SAAS2B,WAAT,CAAqBC,KAArB,EAA4B;AACjCnC,EAAAA,gBAAgB,CAACE,GAAjB,CAAqBiC,KAArB,GAA6BA,KAA7B;AACD;AAED,OAAO,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C9B,EAAAA,cAAc,GAAG8B,KAAjB;AACD;AAED,OAAO,SAASC,YAAT,CAAsBH,KAAtB,EAA6B;AAClChC,EAAAA,QAAQ,CAACoC,IAAT,CAAcJ,KAAd,GAAsBA,KAAtB;AACD;AAED,OAAO,SAAST,gBAAT,CAA0BL,KAA1B,EAAiC;AACtC,SAAO,MAAMA,KAAK,CAACmB,QAAN,IAAkBnB,KAAK,CAACC,kBAAN,CAAyBE,IAAzB,GAAgC,CAAlD,CAAN,CAAP;AACD;AAED,OAAO,SAASiB,aAAT,CAAuBpB,KAAvB,EAA8B;AACnC,MAAME,KAAK,GAAGmB,IAAI,CAACC,KAAL,CAAWtB,KAAK,CAACM,YAAN,GAAqBD,gBAAgB,CAACL,KAAD,CAAhD,CAAd;AACA,SAAO,CACLqB,IAAI,CAACC,KAAL,CAAWpB,KAAK,GAAGF,KAAK,CAACC,kBAAN,CAAyBC,KAA5C,CADK,EAEJA,KAAK,GAAGF,KAAK,CAACC,kBAAN,CAAyBC,KAAlC,GAA2C,CAFtC,CAAP;AAID","sourcesContent":["const audioContext = new AudioContext();\n\nconst stereoPannerNode = new StereoPannerNode(audioContext, {\n  pan: 0\n});\nconst gainNode = audioContext.createGain();\n\nlet audioBuffer = null;\nlet upAudioBuffer = null;\n\nlet eventLoopCount = 0;\n\n// Fetch click audio files\nexport async function initClick() {\n  const click = await fetch('./click.wav');\n  const clickArrayBuffer = await click.arrayBuffer();\n\n  const clickUp = await fetch('./click-accent.wav');\n  const clickUpArrayBuffer = await clickUp.arrayBuffer();\n\n  return new Promise(res => {\n    audioContext.decodeAudioData(clickArrayBuffer, _ => {\n      audioBuffer = _;\n\n      audioContext.decodeAudioData(clickUpArrayBuffer, _ => {\n        upAudioBuffer = _;\n\n        res();\n      });\n    });\n  });\n}\n\nexport function clickEventLoop(store) {\n  const { beats, unit } = store.state.clickTimeSignature;\n  if (!beats || !unit) {\n    return;\n  }\n\n  const clickInterval = getClickInterval(store.state);\n  if (store.state.playPosition / eventLoopCount > clickInterval) {\n    const bufferSource = audioContext.createBufferSource();\n    bufferSource\n      .connect(gainNode)\n      .connect(stereoPannerNode)\n      .connect(audioContext.destination);\n\n    if (eventLoopCount % beats === 0) {\n      bufferSource.buffer = upAudioBuffer;\n      bufferSource.start();\n    } else {\n      bufferSource.buffer = audioBuffer;\n      bufferSource.start();\n    }\n\n    eventLoopCount++;\n  }\n}\n\nexport function setClickPan(value) {\n  stereoPannerNode.pan.value = value;\n}\n\nexport function setClickEventLoopCount(count) {\n  eventLoopCount = count;\n}\n\nexport function setClickGain(value) {\n  gainNode.gain.value = value;\n}\n\nexport function getClickInterval(state) {\n  return 60 / (state.clickBpm * (state.clickTimeSignature.unit / 4));\n}\n\nexport function getClickBeats(state) {\n  const beats = Math.floor(state.playPosition / getClickInterval(state));\n  return [\n    Math.floor(beats / state.clickTimeSignature.beats),\n    (beats % state.clickTimeSignature.beats) + 1\n  ];\n}\n"]}]}