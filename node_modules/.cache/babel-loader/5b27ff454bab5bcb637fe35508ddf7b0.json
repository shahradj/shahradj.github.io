{"remainingRequest":"/home/shahrad/Documents/shahradj.github.io/node_modules/babel-loader/lib/index.js!/home/shahrad/Documents/shahradj.github.io/src/Track.js","dependencies":[{"path":"/home/shahrad/Documents/shahradj.github.io/src/Track.js","mtime":1692677375720},{"path":"/home/shahrad/Documents/shahradj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1692677374760},{"path":"/home/shahrad/Documents/shahradj.github.io/node_modules/babel-loader/lib/index.js","mtime":1692677374684}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvaG9tZS9zaGFocmFkL0RvY3VtZW50cy9zaGFocmFkai5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0B2dWUvYmFiZWwtcHJlc2V0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3NoYWhyYWQvRG9jdW1lbnRzL3NoYWhyYWRqLmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvQHZ1ZS9iYWJlbC1wcmVzZXQtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9zaGFocmFkL0RvY3VtZW50cy9zaGFocmFkai5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0B2dWUvYmFiZWwtcHJlc2V0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9ob21lL3NoYWhyYWQvRG9jdW1lbnRzL3NoYWhyYWRqLmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvQHZ1ZS9iYWJlbC1wcmVzZXQtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBXYXZlU3VyZmVyIGZyb20gJ3dhdmVzdXJmZXIuanMnOwoKdmFyIFRyYWNrID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBUcmFjayhfcmVmKSB7CiAgICB2YXIgYXVkaW9Db250ZXh0ID0gX3JlZi5hdWRpb0NvbnRleHQsCiAgICAgICAgc3RlcmVvUGFubmVyTm9kZSA9IF9yZWYuc3RlcmVvUGFubmVyTm9kZSwKICAgICAgICBuYW1lID0gX3JlZi5uYW1lOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFjayk7CgogICAgdGhpcy5uYW1lID0gbmFtZTsKICAgIHRoaXMuYXVkaW9Db250ZXh0ID0gYXVkaW9Db250ZXh0OwogICAgdGhpcy5zdGVyZW9QYW5uZXJOb2RlID0gc3RlcmVvUGFubmVyTm9kZTsKICAgIHRoaXMucmVhZHkgPSBmYWxzZTsKICAgIHRoaXMuZ2Fpbk5vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpOwogICAgdGhpcy5nYWluVmFsdWUgPSAxOwogICAgdGhpcy5hY3RpdmUgPSB0cnVlOwogICAgdGhpcy5wbGF5aW5nID0gZmFsc2U7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVHJhY2ssIFt7CiAgICBrZXk6ICJpbml0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfaW5pdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShhcnJheUJ1ZmZlcikgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAgIHZhciBhdWRpb0J1ZmZlcjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5hdWRpb0NvbnRleHQuZGVjb2RlQXVkaW9EYXRhKGFycmF5QnVmZmVyLCByZXMpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGF1ZGlvQnVmZmVyID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9CdWZmZXIgPSBhdWRpb0J1ZmZlcjsKICAgICAgICAgICAgICAgIHRoaXMuaW5pdEF1ZGlvU291cmNlKCk7CiAgICAgICAgICAgICAgICB0aGlzLnJlYWR5ID0gdHJ1ZTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGluaXQoX3gpIHsKICAgICAgICByZXR1cm4gX2luaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGluaXQ7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJpbml0QXVkaW9Tb3VyY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRBdWRpb1NvdXJjZSgpIHsKICAgICAgdGhpcy5hdWRpb1NvdXJjZSA9IHRoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpOwogICAgICB0aGlzLmF1ZGlvU291cmNlLmJ1ZmZlciA9IHRoaXMuYXVkaW9CdWZmZXI7CiAgICAgIHRoaXMuYXVkaW9Tb3VyY2UuY29ubmVjdCh0aGlzLmdhaW5Ob2RlKS5jb25uZWN0KHRoaXMuc3RlcmVvUGFubmVyTm9kZSkuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7CiAgICB9CiAgfSwgewogICAga2V5OiAicGxheSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSh3aGVuKSB7CiAgICAgIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7CgogICAgICBpZiAodGhpcy5wbGF5aW5nKSB7CiAgICAgICAgdGhpcy5hdWRpb1NvdXJjZS5zdG9wKHdoZW4pOwogICAgICB9CgogICAgICB0aGlzLmluaXRBdWRpb1NvdXJjZSgpOwogICAgICB0aGlzLmF1ZGlvU291cmNlLnN0YXJ0KHdoZW4sIG9mZnNldCk7CiAgICAgIHRoaXMucGxheWluZyA9IHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAicGF1c2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKHdoZW4pIHsKICAgICAgdGhpcy5hdWRpb1NvdXJjZS5zdG9wKHdoZW4pOwogICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdG9wIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKHdoZW4pIHsKICAgICAgdGhpcy5hdWRpb1NvdXJjZS5zdG9wKHdoZW4pOwogICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRXYXZlZm9ybVBsYXloZWFkVGltZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0V2F2ZWZvcm1QbGF5aGVhZFRpbWUocGxheWhlYWRUaW1lKSB7CiAgICAgIHRoaXMud2F2ZVN1cmZlci5zZWVrVG8ocGxheWhlYWRUaW1lIC8gdGhpcy5hdWRpb0J1ZmZlci5kdXJhdGlvbik7CiAgICB9CiAgfSwgewogICAga2V5OiAiaW5pdFdhdmVmb3JtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0V2F2ZWZvcm0ob3B0aW9ucykgewogICAgICB0aGlzLndhdmVTdXJmZXIgPSBXYXZlU3VyZmVyLmNyZWF0ZShfb2JqZWN0U3ByZWFkKHsKICAgICAgICBpbnRlcmFjdDogZmFsc2UKICAgICAgfSwgb3B0aW9ucykpOwogICAgICB0aGlzLndhdmVTdXJmZXIubG9hZERlY29kZWRCdWZmZXIodGhpcy5hdWRpb0J1ZmZlcik7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNTb2xvT3JBY3RpdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzU29sb09yQWN0aXZlKHNvbG9UcmFjaykgewogICAgICBpZiAoc29sb1RyYWNrID09PSB0aGlzKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSBpZiAoc29sb1RyYWNrICE9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNldEdhaW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldEdhaW4odHJhY2tHYWluVmFsdWUsIHNvbG9UcmFjaykgewogICAgICB0aGlzLmdhaW5Ob2RlLmdhaW4udmFsdWUgPSB0aGlzLmlzU29sb09yQWN0aXZlKHNvbG9UcmFjaykgPyB0cmFja0dhaW5WYWx1ZSArIHRoaXMuZ2FpblZhbHVlIC0gMSA6IDA7CiAgICB9CiAgfSwgewogICAga2V5OiAiZXZlbnRMb29wIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBldmVudExvb3AocGxheVBvc2l0aW9uKSB7CiAgICAgIGlmICh0aGlzLndhdmVTdXJmZXIpIHsKICAgICAgICB0aGlzLnNldFdhdmVmb3JtUGxheWhlYWRUaW1lKHBsYXlQb3NpdGlvbik7CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBUcmFjazsKfSgpOwoKZXhwb3J0IHsgVHJhY2sgYXMgZGVmYXVsdCB9Ow=="},{"version":3,"sources":["/home/shahrad/Documents/shahradj.github.io/src/Track.js"],"names":["WaveSurfer","Track","audioContext","stereoPannerNode","name","ready","gainNode","createGain","gainValue","active","playing","arrayBuffer","Promise","res","decodeAudioData","audioBuffer","initAudioSource","audioSource","createBufferSource","buffer","connect","destination","when","offset","stop","start","playheadTime","waveSurfer","seekTo","duration","options","create","interact","loadDecodedBuffer","soloTrack","trackGainValue","gain","value","isSoloOrActive","playPosition","setWaveformPlayheadTime"],"mappings":";;;;;;;AAAA,OAAOA,UAAP,MAAuB,eAAvB;;IAEqBC,K;AACnB,uBAAsD;AAAA,QAAxCC,YAAwC,QAAxCA,YAAwC;AAAA,QAA1BC,gBAA0B,QAA1BA,gBAA0B;AAAA,QAARC,IAAQ,QAARA,IAAQ;;AAAA;;AACpD,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKF,YAAL,GAAoBA,YAApB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKE,KAAL,GAAa,KAAb;AACA,SAAKC,QAAL,GAAgBJ,YAAY,CAACK,UAAb,EAAhB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,OAAL,GAAe,KAAf;AACD;;;;;2FAEUC,W;;;;;;;;;uBACiB,IAAIC,OAAJ,CAAY,UAAAC,GAAG;AAAA,yBACvC,KAAI,CAACX,YAAL,CAAkBY,eAAlB,CAAkCH,WAAlC,EAA+CE,GAA/C,CADuC;AAAA,iBAAf,C;;;AAApBE,gBAAAA,W;AAGN,qBAAKA,WAAL,GAAmBA,WAAnB;AACA,qBAAKC,eAAL;AACA,qBAAKX,KAAL,GAAa,IAAb;;;;;;;;;;;;;;;;;;sCAGgB;AAChB,WAAKY,WAAL,GAAmB,KAAKf,YAAL,CAAkBgB,kBAAlB,EAAnB;AACA,WAAKD,WAAL,CAAiBE,MAAjB,GAA0B,KAAKJ,WAA/B;AACA,WAAKE,WAAL,CACGG,OADH,CACW,KAAKd,QADhB,EAEGc,OAFH,CAEW,KAAKjB,gBAFhB,EAGGiB,OAHH,CAGW,KAAKlB,YAAL,CAAkBmB,WAH7B;AAID;;;yBAEIC,I,EAAkB;AAAA,UAAZC,MAAY,uEAAH,CAAG;;AACrB,UAAI,KAAKb,OAAT,EAAkB;AAChB,aAAKO,WAAL,CAAiBO,IAAjB,CAAsBF,IAAtB;AACD;;AAED,WAAKN,eAAL;AACA,WAAKC,WAAL,CAAiBQ,KAAjB,CAAuBH,IAAvB,EAA6BC,MAA7B;AACA,WAAKb,OAAL,GAAe,IAAf;AACD;;;0BAEKY,I,EAAM;AACV,WAAKL,WAAL,CAAiBO,IAAjB,CAAsBF,IAAtB;AACA,WAAKZ,OAAL,GAAe,KAAf;AACD;;;yBAEIY,I,EAAM;AACT,WAAKL,WAAL,CAAiBO,IAAjB,CAAsBF,IAAtB;AACA,WAAKZ,OAAL,GAAe,KAAf;AACD;;;4CAEuBgB,Y,EAAc;AACpC,WAAKC,UAAL,CAAgBC,MAAhB,CAAuBF,YAAY,GAAG,KAAKX,WAAL,CAAiBc,QAAvD;AACD;;;iCAEYC,O,EAAS;AACpB,WAAKH,UAAL,GAAkB3B,UAAU,CAAC+B,MAAX;AAAoBC,QAAAA,QAAQ,EAAE;AAA9B,SAAwCF,OAAxC,EAAlB;AACA,WAAKH,UAAL,CAAgBM,iBAAhB,CAAkC,KAAKlB,WAAvC;AACD;;;mCAEcmB,S,EAAW;AACxB,UAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB,eAAO,IAAP;AACD,OAFD,MAEO,IAAIA,SAAS,KAAK,IAAlB,EAAwB;AAC7B,eAAO,KAAP;AACD,OAFM,MAEA;AACL,eAAO,KAAKzB,MAAZ;AACD;AACF;;;4BAEO0B,c,EAAgBD,S,EAAW;AACjC,WAAK5B,QAAL,CAAc8B,IAAd,CAAmBC,KAAnB,GAA2B,KAAKC,cAAL,CAAoBJ,SAApB,IACvBC,cAAc,GAAG,KAAK3B,SAAtB,GAAkC,CADX,GAEvB,CAFJ;AAGD;;;8BAES+B,Y,EAAc;AACtB,UAAI,KAAKZ,UAAT,EAAqB;AACnB,aAAKa,uBAAL,CAA6BD,YAA7B;AACD;AACF;;;;;;SA/EkBtC,K","sourcesContent":["import WaveSurfer from 'wavesurfer.js';\n\nexport default class Track {\n  constructor({ audioContext, stereoPannerNode, name }) {\n    this.name = name;\n    this.audioContext = audioContext;\n    this.stereoPannerNode = stereoPannerNode;\n    this.ready = false;\n    this.gainNode = audioContext.createGain();\n    this.gainValue = 1;\n    this.active = true;\n    this.playing = false;\n  }\n\n  async init(arrayBuffer) {\n    const audioBuffer = await new Promise(res =>\n      this.audioContext.decodeAudioData(arrayBuffer, res)\n    );\n    this.audioBuffer = audioBuffer;\n    this.initAudioSource();\n    this.ready = true;\n  }\n\n  initAudioSource() {\n    this.audioSource = this.audioContext.createBufferSource();\n    this.audioSource.buffer = this.audioBuffer;\n    this.audioSource\n      .connect(this.gainNode)\n      .connect(this.stereoPannerNode)\n      .connect(this.audioContext.destination);\n  }\n\n  play(when, offset = 0) {\n    if (this.playing) {\n      this.audioSource.stop(when);\n    }\n\n    this.initAudioSource();\n    this.audioSource.start(when, offset);\n    this.playing = true;\n  }\n\n  pause(when) {\n    this.audioSource.stop(when);\n    this.playing = false;\n  }\n\n  stop(when) {\n    this.audioSource.stop(when);\n    this.playing = false;\n  }\n\n  setWaveformPlayheadTime(playheadTime) {\n    this.waveSurfer.seekTo(playheadTime / this.audioBuffer.duration);\n  }\n\n  initWaveform(options) {\n    this.waveSurfer = WaveSurfer.create({ interact: false, ...options });\n    this.waveSurfer.loadDecodedBuffer(this.audioBuffer);\n  }\n\n  isSoloOrActive(soloTrack) {\n    if (soloTrack === this) {\n      return true;\n    } else if (soloTrack !== null) {\n      return false;\n    } else {\n      return this.active;\n    }\n  }\n\n  setGain(trackGainValue, soloTrack) {\n    this.gainNode.gain.value = this.isSoloOrActive(soloTrack)\n      ? trackGainValue + this.gainValue - 1\n      : 0;\n  }\n\n  eventLoop(playPosition) {\n    if (this.waveSurfer) {\n      this.setWaveformPlayheadTime(playPosition);\n    }\n  }\n}\n"]}]}