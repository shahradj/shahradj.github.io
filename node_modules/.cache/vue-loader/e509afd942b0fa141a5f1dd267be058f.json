{"remainingRequest":"/home/shahrad/Documents/shahradj.github.io/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/shahrad/Documents/shahradj.github.io/src/components/Track.vue?vue&type=style&index=0&id=1a463fcb&lang=scss&scoped=true&","dependencies":[{"path":"/home/shahrad/Documents/shahradj.github.io/src/components/Track.vue","mtime":1703645815414},{"path":"/home/shahrad/Documents/shahradj.github.io/node_modules/css-loader/dist/cjs.js","mtime":1692677374868},{"path":"/home/shahrad/Documents/shahradj.github.io/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1692677375504},{"path":"/home/shahrad/Documents/shahradj.github.io/node_modules/postcss-loader/src/index.js","mtime":1692677375200},{"path":"/home/shahrad/Documents/shahradj.github.io/node_modules/sass-loader/dist/cjs.js","mtime":1692677375392},{"path":"/home/shahrad/Documents/shahradj.github.io/node_modules/vuetify-loader/lib/loader.js","mtime":1692677375528},{"path":"/home/shahrad/Documents/shahradj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1692677374760},{"path":"/home/shahrad/Documents/shahradj.github.io/node_modules/vue-loader/lib/index.js","mtime":1692677375504}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7CiAgLnByb2dyZXNzIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGxlZnQ6IDQ3JTsKICAgIHRvcDogMzglOwogIH0KfQoKLmNvbnRhaW5lciB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9Cg=="},{"version":3,"sources":["Track.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Track.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <VCard class=\"mb-4\">\n    <VCardText>\n      <VRow no-gutters>\n        <VCol cols=\"12\" sm=\"3\" class=\"pr-4\">\n          <VTextField v-model=\"track.name\" />\n          <VRow dense justify=\"space-between\">\n            <VBtn\n              :outlined=\"!track.active\"\n              :color=\"activeColor\"\n              @click=\"toggleActive\"\n              >{{ number }}</VBtn\n            >\n            <VBtn :outlined=\"!solo\" color=\"primary\" @click=\"toggleSolo\"\n              >Solo</VBtn\n            >\n          </VRow>\n          <VSlider\n            hide-details\n            class=\"mt-4\"\n            v-model=\"gain\"\n            min=\"0\"\n            max=\"1.5\"\n            step=\"0.01\"\n          />\n        </VCol>\n        <VCol cols=\"12\" sm=\"9\" class=\"container text-center\">\n          <VProgressCircular\n            indeterminate\n            v-if=\"!track.ready\"\n            class=\"progress\"\n          />\n          <div ref=\"waveformContainer\" />\n        </VCol>\n      </VRow>\n    </VCardText>\n  </VCard>\n</template>\n\n<script>\nimport Track from '../Track';\n\nexport default {\n  props: {\n    number: Number,\n    track: Track\n  },\n  mounted() {},\n  computed: {\n    gain: {\n      get() {\n        return this.track.gainValue;\n      },\n      set(value) {\n        return this.$store.dispatch('setTrackGainValue', {\n          track: this.track,\n          value\n        });\n      }\n    },\n    solo() {\n      return this.$store.state.soloTrack === this.track;\n    },\n    activeColor() {\n      const soloTrack = this.$store.state.soloTrack;\n      return soloTrack === this.track || soloTrack === null\n        ? 'primary'\n        : 'accent';\n    }\n  },\n  watch: {\n    'track.ready'() {\n      this.track.initWaveform({\n        container: this.$refs.waveformContainer,\n        height: 150,\n        cursorColor: 'rgba(0, 0, 0, 0.4)',\n        waveColor: '#999',\n        progressColor: 'rgba(0, 0, 0, 0.4)'\n      });\n    },\n    active(active) {\n      this.track.setGainValue(active ? this.gain : 0);\n    }\n  },\n  methods: {\n    remove() {\n      this.$store.dispatch('removeTrack', this.track);\n    },\n    toggleActive() {\n      this.$store.dispatch('setTrackActive', {\n        track: this.track,\n        value: !this.track.active\n      });\n    },\n    toggleSolo() {\n      this.$store.dispatch('setSoloTrack', this.solo ? null : this.track);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@media (min-width: 768px) {\n  .progress {\n    position: absolute;\n    left: 47%;\n    top: 38%;\n  }\n}\n\n.container {\n  position: relative;\n}\n</style>\n"]}]}