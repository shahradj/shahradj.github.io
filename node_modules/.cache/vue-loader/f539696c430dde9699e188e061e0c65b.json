{"remainingRequest":"/home/shahrad/Documents/multiplayer/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/shahrad/Documents/multiplayer/src/components/Controls.vue?vue&type=style&index=0&id=6fc1c834&lang=scss&scoped=true&","dependencies":[{"path":"/home/shahrad/Documents/multiplayer/src/components/Controls.vue","mtime":1691810851208},{"path":"/home/shahrad/Documents/multiplayer/node_modules/css-loader/dist/cjs.js","mtime":1684244501279},{"path":"/home/shahrad/Documents/multiplayer/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1684244500123},{"path":"/home/shahrad/Documents/multiplayer/node_modules/postcss-loader/src/index.js","mtime":1684244500255},{"path":"/home/shahrad/Documents/multiplayer/node_modules/sass-loader/dist/cjs.js","mtime":1684244499991},{"path":"/home/shahrad/Documents/multiplayer/node_modules/vuetify-loader/lib/loader.js","mtime":1684244499903},{"path":"/home/shahrad/Documents/multiplayer/node_modules/cache-loader/dist/cjs.js","mtime":1684244501439},{"path":"/home/shahrad/Documents/multiplayer/node_modules/vue-loader/lib/index.js","mtime":1684244499927}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc21hbGwtaW5wdXQgewogIG1heC13aWR0aDogNHJlbTsKfQo="},{"version":3,"sources":["Controls.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+LA;AACA;AACA","file":"Controls.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <VRow justify=\"end\" align=\"center\">\n    <VBtn\n      v-if=\"controlEditMode\"\n      small\n      @click=\"$store.dispatch('toggleControlEditMode')\"\n      >Done mapping</VBtn\n    >\n    <VBtn\n      icon\n      @click=\"mapControlOrDispatchAction('playPause')\"\n      :title=\"getControlMappingName('playPause')\"\n      :color=\"getControlMappingColor('playPause')\"\n    >\n      <VIcon>{{ playPauseIcon }}</VIcon>\n    </VBtn>\n    <VBtn\n      icon\n      @click=\"mapControlOrDispatchAction('stop')\"\n      :title=\"getControlMappingName('stop')\"\n      :color=\"getControlMappingColor('stop')\"\n    >\n      <VIcon>{{ mdiStop }}</VIcon>\n    </VBtn>\n\n    <VBtn\n      icon\n      :outlined=\"$store.state.clickActive\"\n      @click=\"mapControlOrDispatchAction('clickActive', 'toggleClickActive')\"\n      :title=\"getControlMappingName('clickActive')\"\n      :color=\"getControlMappingColor('clickActive')\"\n    >\n      <VIcon>{{ mdiMetronome }}</VIcon>\n    </VBtn>\n\n    <TextField v-model=\"clickBpm\" class=\"small-input\" />\n    <TextField v-model=\"clickTimeSignature\" class=\"small-input\" />\n\n    <Clock\n      :values=\"timeValues\"\n      @input=\"setTime\"\n      :icon=\"mdiClockOutline\"\n      class=\"mr-4\"\n    />\n\n    <Clock :values=\"beatsValues\" :icon=\"mdiMusicNote\" @input=\"setBeats\" />\n\n    <VBtn text icon @click=\"$store.dispatch('toggleSettingsDialog')\">\n      <VIcon>{{ mdiWrench }}</VIcon>\n    </VBtn>\n    <VBtn text icon @click=\"$store.dispatch('toggleAboutDialog')\">\n      <VIcon>{{ mdiInformation }}</VIcon>\n    </VBtn>\n  </VRow>\n</template>\n\n<script>\nimport Clock from './Clock';\nimport TextField from './TextField';\nimport {\n  mdiMetronome,\n  mdiStop,\n  mdiWrench,\n  mdiInformation,\n  mdiMusicNote,\n  mdiClockOutline\n} from '@mdi/js';\n\nimport { getClickInterval } from '../click';\n\nexport default {\n  components: {\n    Clock,\n    TextField\n  },\n  data() {\n    return {\n      mdiStop,\n      mdiMetronome,\n      mdiWrench,\n      mdiInformation,\n      mdiMusicNote,\n      mdiClockOutline\n    };\n  },\n  computed: {\n    playPauseIcon() {\n      return {\n        playing: 'mdi-pause',\n        paused: 'mdi-play',\n        stopped: 'mdi-play'\n      }[this.$store.state.playState];\n    },\n    clickBpm: {\n      get() {\n        return this.$store.state.clickBpm;\n      },\n      set(value) {\n        this.$store.dispatch('setClickBpm', value);\n      }\n    },\n    clickTimeSignature: {\n      get() {\n        const { beats, unit } = this.$store.state.clickTimeSignature;\n        return `${beats}/${unit}`;\n      },\n      set(value) {\n        const [beats, unit] = value.split('/');\n        this.$store.dispatch('setClickTimeSignature', {\n          beats: Number(beats) || '',\n          unit: Number(unit) || ''\n        });\n      }\n    },\n    timeValues() {\n      const playPosition = this.$store.state.playPosition;\n      return [\n        Math.floor(playPosition / 60),\n        Math.floor(playPosition % 60),\n        Math.floor((playPosition % 1) * 10)\n      ];\n    },\n    beatsValues() {\n      return this.$store.getters.playBeatsPosition;\n    },\n    controlEditMode() {\n      return this.$store.state.controlEditMode;\n    }\n  },\n  methods: {\n    mapControlOrDispatchAction(controlName, actionName) {\n      if (!this.controlEditMode) {\n        return this.$store.dispatch(actionName || controlName);\n      }\n\n      this.$store.dispatch('setControlEditSelected', controlName);\n    },\n    getControlMappingName(controlName) {\n      if (!this.controlEditMode) {\n        return;\n      }\n      const controlMapping = this.$store.getters.getControlMapping(controlName);\n      if (controlMapping) {\n        const name =\n          {\n            ' ': 'Space'\n          }[controlMapping.value] || controlMapping.value;\n        const type = {\n          key: 'Keyboard',\n          note: 'Note',\n          controlChange: 'Control change'\n        }[controlMapping.type];\n        return `${type}: ${name}`;\n      }\n      return '';\n    },\n    getControlMappingColor(controlName) {\n      if (!this.controlEditMode) {\n        return;\n      }\n      const controlMapping = this.$store.getters.getControlMapping(controlName);\n      if (controlMapping) {\n        return 'yellow';\n      }\n    },\n    setTime({ values, index }) {\n      let [minutes, seconds, tenths] = values;\n      if (index === 0) {\n        seconds = 0;\n        tenths = 0;\n      } else if (index === 1) {\n        tenths = 0;\n      }\n      const playPosition = minutes * 60 + seconds + tenths / 10;\n      this.$store.dispatch('playAt', playPosition);\n    },\n    setBeats({ values, index }) {\n      let [bars, beats] = values;\n      if (index === 0) {\n        beats = 1;\n      }\n      const clickInterval = getClickInterval(this.$store.state);\n      const playPosition =\n        bars * clickInterval * 4 + (beats - 1) * clickInterval;\n      this.$store.dispatch('playAt', playPosition);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.small-input {\n  max-width: 4rem;\n}\n</style>\n"]}]}